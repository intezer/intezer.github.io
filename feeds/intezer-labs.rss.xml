<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Intezer</title><link>blog.intezer.com/</link><description></description><lastBuildDate>Thu, 26 May 2016 10:00:00 +0300</lastBuildDate><item><title>Docker IDA</title><link>blog.intezer.com/docker-ida</link><description>&lt;p&gt;&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;meta name="description" content="Docker IDA Large Scale Reverse Engineering"&gt;
&lt;meta name="keywords" content="docker-ida, docker, docker ida"&gt;
&lt;meta name="author" content="Intezer"&gt;
&lt;/head&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/intezer/docker-ida"&gt;&lt;strong&gt;Docker IDA&lt;/strong&gt;&lt;/a&gt; is an open-source tool used to make reverse engineering on a large-scale simpler and faster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thwarting Malware Threats – It’s Time to Stop Playing in the Sandbox&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many companies contend with hundreds or thousands of suspicious malware threats per day. Current popular solutions for dealing with such threats are sandboxes or simplistic static analysis tools. These are insufficient most of the time. You can get inconsistent results about files, or, investigate a file with anti-VM or anti-debugging techniques that often lead to dead-ends. In most cases, it is necessary for a professional reverse engineer expert to manually analyze the code for deeper inspection and complex insights. On a large amount of files, this can be a slow process and not very cost-effective.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/docker-ida-4.png" width="70%" alt="reverse engineering"/&gt;&lt;/p&gt;
&lt;p&gt;Reverse engineering can get you accurate results about a file, but it is very time-consuming. In the optimal scenario, the researcher would be able to go over all of the files. With the current available crop of reverse engineering tools such as &lt;a href="https://www.hex-rays.com/products/ida/"&gt;IDA Pro&lt;/a&gt; or &lt;a href="http://www.ollydbg.de/"&gt;Ollydbg&lt;/a&gt;, it is not simple to do that on a large scale. For example, if you try to execute thousands of files in a sandbox and you are able to filter 80% of the files, a reverse engineer still has to manually go through each and every one of those unfiltered files. Automating this deep analysis process would make a huge impact in the malware analysis world.&lt;/p&gt;
&lt;p&gt;Here is what the ideal solution would look like:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/docker-ida-1.png" width="80%" alt="large scale reverse engineering"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So why hasn’t this process been scaled before?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Current reverse engineering tools are not designed to work on a large-scale. IDA, for example, has a resource-heavy GUI and the terminal GUI is very challenging to use and automate. You cannot easily deploy IDA, with &lt;a href="https://github.com/idapython"&gt;IDAPython&lt;/a&gt;, or Ollydbg, with &lt;a href="https://sourceforge.net/projects/odbgscript/files/English%20Version/"&gt;ODbgScript&lt;/a&gt;, instances to a cluster of servers in a simple manner, as many scripts, processes, and manual work would be involved. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mass-Scale Malware Threats Needs a Mass-Scale Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We, at &lt;a href="http://intezer.com"&gt;Intezer Labs&lt;/a&gt;, have developed just such a solution to this problem: &lt;strong&gt;Large-Scale Reverse Engineering&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Our Solution ‘Contains’ the Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://intezer.com"&gt;Intezer Labs&lt;/a&gt; was inspired by a relatively new trend in software development that allows processing at scale: containers. Containers solve the problem of how to get software to run reliably when moved from one computing environment to another. One container can wrap up a piece of software in a complete file system that includes everything it needs to run. This can be very useful when moving software from a development environment to a test or production environment and for quick and large-scale deployment. Realizing that the container solution is consistent and reliable, we combine the power of containers with the power of reverse engineering – achieving our goal of large-scale reverse engineering.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/docker-ida-2.png" width="80%" alt="large scale reverse engineering"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Docker IDA Project&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We chose IDA as our preferred reverse engineering tool because it is the most powerful choice for many reverse engineers. We selected Docker as our container technology since it is the most supported and stable. &lt;/p&gt;
&lt;p&gt;There were many challenges in dockerizing IDA. For example, IDA was not designed to run at scale. Another challenge was getting all of the necessary libraries for Python, to be used with IDAPython, that we wanted to embed (i.e., &lt;a href="http://sark.readthedocs.io/en/latest/#"&gt;Sark&lt;/a&gt;) for easy automation development. With Docker IDA and the framework we created in hand, one could very easily create a docker image, deploy thousands of IDA instances, and have an automated reverse engineering experience.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/docker-ida-5.png" width="80%" alt="automated reverse engineering"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What can be done with Large-Scale Reverse Engineering?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Run scripts that can do things such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;ul&gt;
    &lt;li type="circle"&gt; Automated unpacking&lt;/li&gt;
    &lt;li type="circle"&gt; String de-obfuscation&lt;/li&gt;
    &lt;li type="circle"&gt; Fuzzing&lt;/li&gt;
    &lt;li type="circle"&gt; Checking for buffer overflow exploits&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And, much more... all on a &lt;strong&gt;large scale!&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof of Concept&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to show you the power of Docker IDA, we made a proof of concept on a large amount of files. &lt;/p&gt;
&lt;p&gt;We made a script that counts the amount of calls per API function – according to the data it can give you the amount of calls for each “family” of APIs. For example, with the script, we would be able to know that a file has 40% calls to network functions, 30% to I/O functions, and 30% to cryptography functions. This is something that we could not do in any static tool or sandbox because we are not only checking the import table, but counting the amount of calls for each function which only a disassembler tool could accurately achieve.&lt;/p&gt;
&lt;p&gt;In fact, we gathered about 1 million malware samples from various online malware repositories. Next, we created a cluster with many Docker IDA instances. Then, we ran our script on our cluster of deployed Docker IDA containers. &lt;/p&gt;
&lt;p&gt;We got back the results in a short period of time, and now there are multiple ways to analyze the data and come to a useful conclusion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where can I get Docker IDA?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Docker IDA project, including the Docker file with which you can build the Docker image, is available at &lt;a href="http://intezer.com"&gt;Intezer's&lt;/a&gt; GitHub repository. If any researcher or team wants to run an IDAPython script on a large amount of samples, they are most welcome to contact us. We have a cluster of IDA instances which are already up and running.&lt;/p&gt;
&lt;p&gt;Thanks for reading, and also a special thanks to &lt;a href="https://www.hex-rays.com/"&gt;Hex-Rays&lt;/a&gt; for creating IDA. We hope you find Docker IDA useful! &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/intezer/docker-ida"&gt;Docker IDA GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/intezer"&gt;Intezer GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#99;&amp;#111;&amp;#110;&amp;#116;&amp;#97;&amp;#99;&amp;#116;&amp;#64;&amp;#105;&amp;#110;&amp;#116;&amp;#101;&amp;#122;&amp;#101;&amp;#114;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#99;&amp;#111;&amp;#110;&amp;#116;&amp;#97;&amp;#99;&amp;#116;&amp;#64;&amp;#105;&amp;#110;&amp;#116;&amp;#101;&amp;#122;&amp;#101;&amp;#114;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Intezer Labs</dc:creator><pubDate>Thu, 26 May 2016 10:00:00 +0300</pubDate><guid isPermaLink="false">tag:,2016-05-26:blog.intezer.com/docker-ida</guid></item></channel></rss>